; Options for the apc module
apc.enabled=1

; The number of shared memory segments to allocate for the compiler cache. If APC
; is running out of shared memory but apc.shm_size is set as high as the system allows,
; raising this value might prevent APC from exhausting its memory.
; Default: 1
; njansma: Set to default
apc.shm_segments=1

; The size of each shared memory segment given by a shorthand notation as described in this FAQ.
; By default, some systems (including most BSD variants) have very low limits on the size of
; a shared memory segment.
; Default: 32M
; njansma: Configured per host
apc.shm_size=1024M

; The number of seconds a cache entry is allowed to idle in a slot in case this cache entry slot
; is needed by another entry. Leaving this at zero means that APC's cache could potentially
; fill up with stale entries while newer entries won't be cached. In the event of a cache
; running out of available memory, the cache will be completely expunged if ttl is equal to 0.
; Otherwise, if the ttl is greater than 0, APC will attempt to remove expired entries.
; Default: 0
; njansma: Set to >0 so only expired entries are expunged on full memory
apc.ttl=7200

; The number of seconds that a cache entry may remain on the garbage-collection list. This
; value provides a fail-safe in the event that a server process dies while executing a cached
; source file; if that source file is modified, the memory allocated for the old version will not
; be reclaimed until this TTL reached. Set to zero to disable this feature.
; Default: 3600
; njansma: Set to default
apc.gc_ttl=3600

; A "hint" about the number of distinct variables that might be stored. Set to zero or omit if not sure.
; Default: 4096
; njansma: Live server will often see 25k+
apc.entries_hint=25000

; If compiled with MMAP support by using --enable-mmap this is the mktemp-style file_mask
; to pass to the mmap module for determining whether your mmap'ed memory region is going to
; be file-backed or shared memory backed. For straight file-backed mmap, set it to something
; like /tmp/apc.XXXXXX (exactly 6 Xs). To use POSIX-style shm_open/mmap put a .shm somewhere
; in your mask. e.g. /apc.shm.XXXXXX You can also set it to /dev/zero to use your kernel's
; /dev/zero interface to anonymous mmap'ed memory. Leaving it undefined will force an anonymous mmap.
; Default: NULL
; njansma: Use /tmp
apc.mmap_file_mask=/tmp/apc.XXXXXX

; Mostly for testing and debugging. Setting this enables APC for the CLI version of PHP. Under
; normal circumstances, it is not ideal to create, populate and destroy the APC cache on every
; CLI request, but for various test scenarios it is useful to be able to enable APC for the CLI
; version of PHP easily.
; Default: 0
; njansma: Enable for CLI applications and compat
apc.enable_cli=1

; Use the SAPI request start time for TTL.
; Default: 1 in <= 5.1.19
; njansma: 0 now the default per https://github.com/krakjoe/apcu/pull/392
apc.use_request_time=0

; On very busy servers whenever you start the server or
; modify files you can create a race of many processes
; all trying to cache the same data at the same time.
; By default, APCu attempts to prevent "slamming" of a key.
; A key is considered "slammed" if it was the last key set,
; and a context other than the current one set it ( ie. it
; was set by another process or thread)
; Default: 1
; njansma: No need to keep the same key being set, we already do work in application logic
; to avoid this
apc.slam_defense=0

; If you begin to get low on resources, an expunge of the cache
; is performed if it is less than half full. This is not always
; a suitable way of determining if an expunge of the cache
; should be per apc.smart allows you to set a runtime configuration
; value which     is used to determine if an expunge should be run
; if (available_size < apc.smart * requested_size)
; njansma: Allow expunge at half instead of near the end based on the requested allocation size
apc.smart=0
